# Gitlab CI example for deploying a Lambda
#
# Variables typically defined in this file (.gitlab-ci.yml):
#
#   LAMBDA_ARTIFACTS       Set to target the lambda artifact(s).  Examples: "lambda1.py", "lambda1.py lambda2.py", "*.py"
#   LAMBDA_RUNTIME         Set to the lambda runtime type. Examples: python, nashorn, nodejs, python3, golang
#   LAMBDA_API             Set to the Gestalt target API resource name
#   LAMBDA_ENVIRONMENT_ID  Set to the Gestalt target Environment resource ID
#
# Variables typically defined as Gitlab CI Secret Variables:
#
# - Gestalt Variables (for trigging Lambda create/update in Gestalt Platform)
#
#     CI_SCRIPT_URL          Set to URL of Lambda deploy script
#     CI_URL                 Lambda deployment URL (Typically hosted by Gestalt Platform)
#     GF_API_KEY             Gestalt service account key (if authentication is required)
#     GF_API_SECRET          Gestalt service account secret (if authentication is required)
#
# - AWS Variables (for uploading lambda artifact(s) to S3):
#
#     AWS_ACCESS_KEY_ID      AWS access key (typically for service account)
#     AWS_SECRET_ACCESS_KEY  AWS secret key (typically for service account)
#     S3_BUCKET_NAME         Target AWS S3 bucket name

variables:
  LAMBDA_ENVIRONMENT_ID: e7b3ca8b-5b9a-4a51-8309-3ced4718e41f
  LAMBDA_API: dev1
  LAMBDA_ARTIFACTS: "*.py"
  LAMBDA_RUNTIME: python
  DEBUG: "true"

stages:
  - deploy

# build:
#   stage: build
#   script: echo "Placeholder for building the app (this could create a zip package)"

# Trigger deploy except when branch starts with 'wip-' for work-in-progress
.deploy_template: &deploy
  image: python:latest
  stage: deploy
  script:
    # Install aws cli dependency for CI Lambda deploy script and
    # run CI Lambda deploy script, which uses 'LAMBDA_*' variables as well as
    # AWS_* and CI_URL variables.
    - pip install awscli
    - curl $CI_SCRIPT_URL > /tmp/ci && chmod +x /tmp/ci && /tmp/ci deploy
  except:
    - /^[Ww][Ii][Pp]-.*$/


.stop_template: &stop
  image: python:latest
  stage: deploy
  script:
    - curl $CI_SCRIPT_URL > /tmp/ci && chmod +x /tmp/ci && /tmp/ci stop
  when: manual


# Automatic deploy triggered on check in to master
auto_deploy_master:
  <<: *deploy
  allow_failure: false
  environment:
      name: development
      on_stop: stop_master
  only:
    - master

# Manual deploy stage, run manually from Gitlab
deploy_master:
  <<: *deploy
  environment:
      name: development
      on_stop: stop_master
  only:
    - master
  when: manual

auto_deploy_review:
  <<: *deploy
  allow_failure: false
  environment:
    # name: review/$CI_COMMIT_REF_SLUG
    name: review/$CI_COMMIT_REF_NAME
    on_stop: stop_review
  only:
    - branches
  except:
    - master

deploy_review:
  <<: *deploy
  environment:
    # name: review/$CI_COMMIT_REF_SLUG
    name: review/$CI_COMMIT_REF_NAME
    on_stop: stop_review
  only:
    - branches
  except:
    - master
  when: manual


stop_master:
  <<: *stop
  environment:
    name: development
    action: stop
  only:
    - master

stop_review:
  <<: *stop
  environment:
    # name: review/$CI_COMMIT_REF_SLUG
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - branches
  except:
    - master
